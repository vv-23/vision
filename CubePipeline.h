#pragma once
#include <opencv2/opencv.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

/**
* CubePipeline class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class CubePipeline {
	public:
		struct parameters {
			double hsvThresholdHue[2];
			double hsvThresholdSaturation[2];
			double hsvThresholdValue[2];
			bool findContoursExternalOnly;
			double filterContoursMinArea;
			double filterContoursMinPerimeter;
			double filterContoursMinWidth;
			double filterContoursMaxWidth;
			double filterContoursMinHeight;
			double filterContoursMaxHeight;
			double filterContoursSolidity[2];
			double filterContoursMaxVertices;
			double filterContoursMinVertices;
			double filterContoursMinRatio;
			double filterContoursMaxRatio;
			double findBlobsMinArea;
			double findBlobsCircularity[2];
			bool findBlobsDarkBlobs;
		};
	private:
		cv::Mat hsvThresholdOutput;
		std::vector<std::vector<cv::Point> > findContoursOutput;
		std::vector<std::vector<cv::Point> > filterContoursOutput;
		cv::Mat cvBitwiseNotOutput;
		std::vector<cv::KeyPoint> findBlobsOutput;
		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);
		void cvBitwiseNot(cv::Mat &, cv::Mat &);
		void findBlobs(cv::Mat &, double , double [], bool , std::vector<cv::KeyPoint> &);
		parameters mDefaultParams = {
			{25.899280575539564, 60.81494057724958},
			{171.98741007194246, 224.6943972835314},
			{188.03956834532374, 244.17657045840406},
			false,
			300.0,  // default Double
			0.0,  // default Double
			0,  // default Double
			1000,  // default Double
			0,  // default Double
			1000,  // default Double
			{0, 100},
			1000000,  // default Double
			0,  // default Double
			0,  // default Double
			1000,  // default Double
			200.0,  // default Double
			{0.0, 1.0},
			true
		};
		parameters* mParams;

	public:
		CubePipeline();
		void setParams(parameters*);
		void Process(cv::Mat& source0);
		cv::Mat* GetHsvThresholdOutput();
		std::vector<std::vector<cv::Point> >* GetFindContoursOutput();
		std::vector<std::vector<cv::Point> >* GetFilterContoursOutput();
		cv::Mat* GetCvBitwiseNotOutput();
		std::vector<cv::KeyPoint>* GetFindBlobsOutput();
};